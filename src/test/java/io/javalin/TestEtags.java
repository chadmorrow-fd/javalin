/*
 * Javalin - https://javalin.io
 * Copyright 2017 David Ã…se
 * Licensed under Apache 2.0: https://github.com/tipsy/javalin/blob/master/LICENSE
 */

package io.javalin;

import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import io.javalin.core.util.Header;
import io.javalin.util.TestUtil;
import org.junit.Test;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.isEmptyOrNullString;

public class TestEtags {

    @Test
    public void test_autogenerated_etags_work_get() {
        new TestUtil(Javalin.create().enableAutogeneratedEtags()).test((app, http) -> {
            app.get("/automatic", ctx -> ctx.result("Hello!"));
            HttpResponse<String> response = Unirest.get(http.origin + "/automatic").asString();
            assertThat(response.getStatus(), is(200));
            assertThat(response.getBody(), is("Hello!"));
            String etag = response.getHeaders().getFirst(Header.ETAG);
            HttpResponse<String> response2 = Unirest.get(http.origin + "/automatic").header(Header.IF_NONE_MATCH, etag).asString();
            String etag2 = response2.getHeaders().getFirst(Header.ETAG);
            assertThat(response2.getStatus(), is(304));
            assertThat(response2.getBody(), isEmptyOrNullString());
            assertThat(etag, is(etag2));
        });
    }

    @Test
    public void test_autogenerated_etags_dont_affect_put() {
        new TestUtil(Javalin.create().enableAutogeneratedEtags()).test((app, http) -> {
            app.put("/automatic", ctx -> ctx.result("Hello!"));
            HttpResponse<String> response = Unirest.put(http.origin + "/automatic").asString();
            assertThat(response.getHeaders().getFirst(Header.ETAG), isEmptyOrNullString());
        });
    }

    @Test
    public void test_manual_etags_are_preferred() {
        new TestUtil(Javalin.create().enableAutogeneratedEtags()).test((app, http) -> {
            app.get("/manual", ctx -> ctx.result("Hello!").header(Header.ETAG, "1234"));
            HttpResponse<String> response = Unirest.get(http.origin + "/manual").asString();
            assertThat(response.getStatus(), is(200));
            assertThat(response.getBody(), is("Hello!"));
            String etag = response.getHeaders().getFirst(Header.ETAG);
            HttpResponse<String> response2 = Unirest.get(http.origin + "/manual").header(Header.IF_NONE_MATCH, etag).asString();
            assertThat(response2.getStatus(), is(304));
            assertThat(response2.getBody(), isEmptyOrNullString());
            assertThat(etag, is("1234"));
        });
    }

    @Test
    public void test_manual_etags_work_put() {
        new TestUtil().test((app, http) -> {
            app.put("/manual", ctx -> ctx.result("Hello!").header(Header.ETAG, "1234"));
            HttpResponse<String> response = Unirest.put(http.origin + "/manual").asString();
            assertThat(response.getHeaders().getFirst(Header.ETAG), is("1234"));
        });
    }

    @Test
    public void test_no_etags_work() {
        new TestUtil().test((app, http) -> {
            app.get("/", ctx -> ctx.result("Hello!"));
            assertThat(Unirest.get(http.origin + "/").asString().getBody(), is("Hello!"));
            assertThat(Unirest.get(http.origin + "/").asString().getStatus(), is(200));
            assertThat(Unirest.get(http.origin + "/").asString().getHeaders().getFirst(Header.ETAG), isEmptyOrNullString());
        });
    }

}
